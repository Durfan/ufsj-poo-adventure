
package adventure;

import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
//import java.io.*;
//import javax.sound.sampled.*;

public class Game extends javax.swing.JFrame {
    
    private static final Map map = new Map();
    private static Sala salatual;
    private static Player player;

    public Game() {
        initComponents();
        salatual = Map.getSala(0);
        String nome = JOptionPane.showInputDialog("Nome do Jogador: ");
        player = new Player(nome);
        prompt.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
        infoArea.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
        atualizaJogo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        salaID = new javax.swing.JLabel();
        visualPane1 = new javax.swing.JLayeredPane();
        nomePN = new javax.swing.JLabel();
        nomePL = new javax.swing.JLabel();
        nomePS = new javax.swing.JLabel();
        nomePO = new javax.swing.JLabel();
        icTrol = new javax.swing.JLabel();
        icEpt = new javax.swing.JLabel();
        icBau = new javax.swing.JLabel();
        portaN = new javax.swing.JLabel();
        portaL = new javax.swing.JLabel();
        portaS = new javax.swing.JLabel();
        portaO = new javax.swing.JLabel();
        gamebck = new javax.swing.JLabel();
        icBag = new javax.swing.JLabel();
        icAxe = new javax.swing.JLabel();
        icPto = new javax.swing.JLabel();
        icOro = new javax.swing.JLabel();
        icDmt = new javax.swing.JLabel();
        icKey = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        infoArea = new javax.swing.JTextArea();
        prompt = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Adventure POO");
        setResizable(false);
        setSize(new java.awt.Dimension(800, 600));

        salaID.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/hero.png"))); // NOI18N
        salaID.setText("Sala ID");

        visualPane1.setPreferredSize(new java.awt.Dimension(458, 458));

        nomePN.setForeground(new java.awt.Color(255, 255, 255));
        nomePN.setText("X");
        visualPane1.add(nomePN);
        nomePN.setBounds(240, 50, 9, 15);

        nomePL.setForeground(new java.awt.Color(255, 255, 255));
        nomePL.setText("X");
        visualPane1.add(nomePL);
        nomePL.setBounds(400, 240, 9, 15);

        nomePS.setForeground(new java.awt.Color(255, 255, 255));
        nomePS.setText("X");
        visualPane1.add(nomePS);
        nomePS.setBounds(210, 390, 9, 15);

        nomePO.setForeground(new java.awt.Color(255, 255, 255));
        nomePO.setText("X");
        visualPane1.add(nomePO);
        nomePO.setBounds(50, 210, 9, 15);

        icTrol.setForeground(new java.awt.Color(255, 255, 255));
        icTrol.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/troll.png"))); // NOI18N
        icTrol.setText("Troll");
        visualPane1.add(icTrol);
        icTrol.setBounds(80, 110, 250, 64);

        icEpt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/bauvazio.png"))); // NOI18N
        visualPane1.add(icEpt);
        icEpt.setBounds(260, 250, 64, 50);

        icBau.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/bau.png"))); // NOI18N
        visualPane1.add(icBau);
        icBau.setBounds(260, 250, 64, 64);

        portaN.setForeground(new java.awt.Color(255, 255, 255));
        portaN.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        portaN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/pnorte.png"))); // NOI18N
        visualPane1.add(portaN);
        portaN.setBounds(197, 5, 64, 64);

        portaL.setForeground(new java.awt.Color(255, 255, 255));
        portaL.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        portaL.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/pleste.png"))); // NOI18N
        visualPane1.add(portaL);
        portaL.setBounds(389, 197, 64, 64);

        portaS.setForeground(new java.awt.Color(255, 255, 255));
        portaS.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        portaS.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/psul.png"))); // NOI18N
        visualPane1.add(portaS);
        portaS.setBounds(197, 389, 64, 64);

        portaO.setForeground(new java.awt.Color(255, 255, 255));
        portaO.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        portaO.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/poeste.png"))); // NOI18N
        portaO.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        visualPane1.add(portaO);
        portaO.setBounds(5, 197, 64, 64);

        gamebck.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/salabck.png"))); // NOI18N
        visualPane1.add(gamebck);
        gamebck.setBounds(5, 5, 448, 448);

        icBag.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/mochila.png"))); // NOI18N
        icBag.setText("X 0");

        icAxe.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/machado.png"))); // NOI18N
        icAxe.setText("X 0");

        icPto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/pocao.png"))); // NOI18N
        icPto.setText("X 0");

        icOro.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/gold.png"))); // NOI18N
        icOro.setText("X 0");

        icDmt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/diamante.png"))); // NOI18N
        icDmt.setText("X 0");

        icKey.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/chave.png"))); // NOI18N
        icKey.setText("X 0");

        jScrollPane1.setBorder(null);
        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        infoArea.setEditable(false);
        infoArea.setLineWrap(true);
        infoArea.setRows(3);
        infoArea.setBorder(null);
        jScrollPane1.setViewportView(infoArea);

        prompt.setBorder(null);
        prompt.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        prompt.setName("comando"); // NOI18N
        prompt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                promptActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(prompt)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(icBag, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(icDmt, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(icOro, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(icPto, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(icKey, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(icAxe, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(salaID, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(20, 20, 20)
                .addComponent(visualPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(visualPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(salaID)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(icBag)
                            .addComponent(icAxe))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(icPto)
                            .addComponent(icOro, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(icKey)
                            .addComponent(icDmt))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(prompt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(12, 12, 12))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void promptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_promptActionPerformed
        comandos();
        atualizaJogo();
    }//GEN-LAST:event_promptActionPerformed

    /**
     * @param args the command line arguments
     */
    
    public static void main(String args[]) {
        
        Game game = new Game();
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            game.setLocationRelativeTo(null);
            game.setVisible(true);
        });
        
    }
    
    private void atualizaJogo() {
        String plyNome = player.getNome();
        String IDsala  = Integer.toString(Map.getSalaID(salatual));
        
        prompt.setText("");
        salaID.setText("<html>Sir. " + plyNome + "<br/>Sala " + IDsala + "</html>");
        icBag.setText("X " + Integer.toString(player.cargo()));
        icAxe.setText("X " + Integer.toString(player.itens(Machado.class)));
        icPto.setText("X " + Integer.toString(player.itens(Pocao.class)));
        icKey.setText("X " + Integer.toString(player.itens(Chave.class)));
        icOro.setText("X " + Integer.toString(player.getOuro().getQuantidade()));
        icDmt.setText("X " + Integer.toString(player.getDiamante().getQuantidade()));
        portaN.setVisible(salatual.getPortaN());
        portaL.setVisible(salatual.getPortaL());
        portaS.setVisible(salatual.getPortaS());
        portaO.setVisible(salatual.getPortaO());
        nomePN.setText(salatual.getNomePortaN());
        nomePL.setText(salatual.getNomePortaL());
        nomePS.setText(salatual.getNomePortaS());
        nomePO.setText(salatual.getNomePortaO());
        nomePN.setVisible(salatual.getPortaN());
        nomePL.setVisible(salatual.getPortaL());
        nomePS.setVisible(salatual.getPortaS());
        nomePO.setVisible(salatual.getPortaO());
        icTrol.setVisible(salatual.temTroll());
        icBau.setVisible(salatual.getStash().stashCheio());
        icEpt.setVisible(!salatual.getStash().stashCheio());
        if (salatual.temTroll()) {
            combate();
        }
    }
    
    private void combate() {
        String trlNome = salatual.getTroll().getNome();
        String trollID = Integer.toString(salatual.getTroll().getTrollID());
        icTrol.setText("<html>#" + trollID + "<br/>" + trlNome + "<html>");
        infoArea.append(trlNome + " nao quer brincar!" + "\n");
        
        if (salatual.getStash().temMachado()) {
            infoArea.append(trlNome + " arremessou machado!" + "\n");
            if (player.recebeHit()) {
                icOro.setText("X " + Integer.toString(player.getOuro().getQuantidade()));
                infoArea.append("Você perdeu todo o seu ouro!" + "\n");
            } else {
                icBag.setText("X " + Integer.toString(player.cargo()));
                icPto.setText("X " + Integer.toString(player.itens(Pocao.class)));
                infoArea.append("Você usou uma pocao, corra!" + "\n");
            }
        }
    }
    
    private void comandos() { 
    String srtCMD = prompt.getText();
    String cmdACT, args;
    
    if (srtCMD.contains(" ")) {
        cmdACT = srtCMD.substring(0, srtCMD.indexOf(" "));
        args = srtCMD.substring(srtCMD.indexOf(" ") + 1);
    } else {
        cmdACT = srtCMD;
        args   = "nope";
    }

    switch (cmdACT) {
        case "view":
            view();
            break;
        case "pickUp":
            pickUp(args);
            break;
        case "moveTo":
            moveTo(args);
            break;
        case "throwAxe":
            throwAxe(args);
            break;
        case "drop":
            drop(args);
            break;
        default:
            infoArea.append(player.getNome() + ">" + prompt.getText() + "\n");
            infoArea.append("Comando Invalido." + "\n");
        }
    }
    
    private void drop(String args) {
        player.drop(args);
    }
    
    private void throwAxe(String args) {
        
        if (salatual.getTroll() == null) {
            infoArea.append("Arremessar no que em que por que?" + "\n");
            return;
        }
        String txCursor = player.getNome() + ">";
        String trolNome = salatual.getTroll().getNome();
        
        if (args.equals(trolNome)) {
            if (player.thrownAxe()) {
                infoArea.append(txCursor + "Matou o " + trolNome + "!\n");
                salatual.setTroll(null);
            } else {
                infoArea.append(txCursor + "tente usar a diplomacia.\n");
            }
        } else {
            infoArea.append(" t h r o w A x e...\n");
        }
    }
    
    private void moveTo(String args) {
        Stash stash = salatual.getStash();
        String txCursor = player.getNome() + ">";
        String msgText = txCursor + "esta perto do " + args + ".\n";
        switch (args) {
            case "A": case "B": case "C":
                Sala from = salatual;
                salatual = salatual.moveTo(from,args, player);
                map.movimentaTrolls();
                infoArea.append(txCursor + prompt.getText() + salatual.moveToSTR(from, args, player)+ "\n");
            break;
            case "gold":
                stash.getOuro().setAlcansavel(true);
                infoArea.append(msgText);
            break;
            case "diamante":
                stash.getDiamante().setAlcansavel(true);
                infoArea.append(msgText);
            break;
            case "axe":
                stash.alcancaAxe();
                infoArea.append(msgText);
            break;
            case "chave":
                stash.alcancaChave(true);
                infoArea.append(msgText);
            break;
            default:
                infoArea.append(txCursor + "nao da pra ir." + "\n");
        }
    }
    
    private void pickUp(String args) {
        Stash stash = salatual.getStash();
        
        if (salatual.getTroll() != null) {
            String trolNome = salatual.getTroll().getNome();
            infoArea.append(trolNome + ">" + "protege as parada.\n");
            return;
        }
        
        Boolean bagfull = player.cargo() < 5;
        Boolean pertoGD = !stash.getOuro().getAlcansavel();
        Boolean pertoDM = !stash.getDiamante().getAlcansavel();
        String txCursor = player.getNome() + ">";
        String errPegar = txCursor + "O " + args +" está longe.\n";

        switch (args) {
            case "gold":
                if (pertoGD) {
                    infoArea.append(errPegar);
                } else {
                    salatual.pickUp(player,new Ouro());
                }
                break;
            case "diamante":
                if (pertoDM) {
                    infoArea.append(errPegar);
                } else {
                    salatual.pickUp(player,new Diamante());
                }
                break;
            case "axe":
                if (!bagfull) {
                    infoArea.append(txCursor + "Sua mochila esta cheia." + "\n");
                } else {
                    salatual.pickUp(player,new Machado());
                }
                break;
            case "potion":
                if (!bagfull) {
                    infoArea.append(txCursor + "Sua mochila esta cheia." + "\n");
                } else {
                    salatual.pickUp(player,new Pocao());
                }
                break;
            case "chave":
                if (!bagfull) {
                    infoArea.append(txCursor + "Sua mochila esta cheia." + "\n");
                } else {
                    salatual.pickUp(player,new Chave());
                }
            break;
            default:
                infoArea.append(txCursor + "Nao da pra pegar " + args + ".\n");
        }
    }
    
    private void view() {
        Stash stash = salatual.getStash();
        Integer ouro = stash.getOuro().getQuantidade();
        Integer diam = stash.getDiamante().getQuantidade();
        Integer mach = stash.viewMachados();
        Integer poca = stash.viewPocoes();
            
        infoArea.append(player.getNome() + ">" + prompt.getText() + "\n");
        infoArea.append("--------------- Sala " + Integer.toString(Map.getSalaID(salatual)) + "\n");
        infoArea.append("Ouro: " + Integer.toString(ouro) + "\n");
        infoArea.append("Diamantes: " + Integer.toString(diam) + "\n");
        infoArea.append("Machados: " + Integer.toString(mach) + "\n");
        infoArea.append("Pocoes: " + Integer.toString(poca) + "\n");
        infoArea.append("Chaves: " + stash.viewChaves() + "\n");
        infoArea.append("--------------------------\n");
    }
    
//    public void sound(File filename) {
//        try {
//            AudioInputStream stream;
//            AudioFormat format;
//            DataLine.Info info;
//            Clip clip;
//
//            stream = AudioSystem.getAudioInputStream(filename);
//            format = stream.getFormat();
//            info = new DataLine.Info(Clip.class, format);
//            clip = (Clip) AudioSystem.getLine(info);
//            clip.open(stream);
//            clip.start();
//        }
//        catch (IOException | LineUnavailableException | UnsupportedAudioFileException e) {
//            // nopes
//        }
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel gamebck;
    private javax.swing.JLabel icAxe;
    private javax.swing.JLabel icBag;
    private javax.swing.JLabel icBau;
    private javax.swing.JLabel icDmt;
    private javax.swing.JLabel icEpt;
    private javax.swing.JLabel icKey;
    private javax.swing.JLabel icOro;
    private javax.swing.JLabel icPto;
    private javax.swing.JLabel icTrol;
    private javax.swing.JTextArea infoArea;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel nomePL;
    private javax.swing.JLabel nomePN;
    private javax.swing.JLabel nomePO;
    private javax.swing.JLabel nomePS;
    private javax.swing.JLabel portaL;
    private javax.swing.JLabel portaN;
    private javax.swing.JLabel portaO;
    private javax.swing.JLabel portaS;
    private javax.swing.JTextField prompt;
    private javax.swing.JLabel salaID;
    private javax.swing.JLayeredPane visualPane1;
    // End of variables declaration//GEN-END:variables
}